(function(){var t,e=function(t,e){return function(){return t.apply(e,arguments)}},n=[].slice,i=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1};t=Cable.INTERNAL.message_types,Cable.Connection=function(){function o(t){this.consumer=t,this.open=e(this.open,this),this.open()}return o.reopenDelay=500,o.prototype.send=function(t){return!!this.isOpen()&&(this.webSocket.send(JSON.stringify(t)),!0)},o.prototype.open=function(){if(this.webSocket&&!this.isState("closed"))throw new Error("Existing connection must be closed before opening");return this.webSocket=new WebSocket(this.consumer.url),this.installEventHandlers(),!0},o.prototype.close=function(){var t;return null!=(t=this.webSocket)?t.close():void 0},o.prototype.reopen=function(){if(this.isState("closed"))return this.open();try{return this.close()}finally{setTimeout(this.open,this.constructor.reopenDelay)}},o.prototype.isOpen=function(){return this.isState("open")},o.prototype.isState=function(){var t,e;return e=1<=arguments.length?n.call(arguments,0):[],t=this.getState(),i.call(e,t)>=0},o.prototype.getState=function(){var t,e,n;for(e in WebSocket)if(n=WebSocket[e],n===(null!=(t=this.webSocket)?t.readyState:void 0))return e.toLowerCase();return null},o.prototype.installEventHandlers=function(){var t,e;for(t in this.events)e=this.events[t].bind(this),this.webSocket["on"+t]=e},o.prototype.events={message:function(e){var n,i,o,s;switch(o=JSON.parse(e.data),n=o.identifier,i=o.message,s=o.type,s){case t.confirmation:return this.consumer.subscriptions.notify(n,"connected");case t.rejection:return this.consumer.subscriptions.reject(n);default:return this.consumer.subscriptions.notify(n,"received",i)}},open:function(){return this.disconnected=!1,this.consumer.subscriptions.reload()},close:function(){return this.disconnect()},error:function(){return this.disconnect()}},o.prototype.disconnect=function(){if(!this.disconnected)return this.disconnected=!0,this.consumer.subscriptions.notifyAll("disconnected")},o.prototype.toJSON=function(){return{state:this.getState()}},o}()}).call(this);